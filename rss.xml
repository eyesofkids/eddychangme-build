<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[eddychang部落格]]></title><description><![CDATA[Eddy Chang的個人部落格]]></description><link>https://eddychang.me</link><generator>RSS for Node</generator><lastBuildDate>Fri, 08 Mar 2019 17:21:27 GMT</lastBuildDate><item><title><![CDATA[新的部落格上線了！]]></title><description><![CDATA[新的部落格正式上線了(2019/03/08)。 改使用 gatsby 的方式產生網頁，樣版使用 gatsby-starter-personal-blog 原有的部落格文章將會先放在 https://oldblog.eddychang.me…]]></description><link>https://eddychang.me/new-blog/</link><guid isPermaLink="false">https://eddychang.me/new-blog/</guid><content:encoded>&lt;p&gt;新的部落格正式上線了(2019/03/08)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改使用 gatsby 的方式產生網頁，樣版使用&lt;a href=&quot;https://github.com/greglobinski/gatsby-starter-personal-blog&quot;&gt;gatsby-starter-personal-blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原有的部落格文章將會先放在&lt;a href=&quot;https://oldblog.eddychang.me&quot;&gt;https://oldblog.eddychang.me&lt;/a&gt;中，之後會將還能使用與參考的文章移到新的部落格之中。&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[React Native專案建立方式]]></title><description><![CDATA[前言 自從 Create React Native App(CRNA) 這個專案在 2018 年 9 月 宣布棄用 ，與 Expo 工具合併後，建立 React Native 專案的方式，又變得有點不太一樣。未來有可能還會再變動。 方式一: 使用 Expo CLI 說明 Expo…]]></description><link>https://eddychang.me/react-native-project-start-step/</link><guid isPermaLink="false">https://eddychang.me/react-native-project-start-step/</guid><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;自從 Create React Native App(CRNA) 這個專案在 2018 年 9 月&lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/CHANGELOG.md&quot;&gt;宣布棄用&lt;/a&gt;，與 Expo 工具合併後，建立 React Native 專案的方式，又變得有點不太一樣。未來有可能還會再變動。&lt;/p&gt;
&lt;h2&gt;方式一: 使用 Expo CLI&lt;/h2&gt;
&lt;h3&gt;說明&lt;/h3&gt;
&lt;p&gt;Expo CLI 命令列工具是最簡單的方式，也是目前 React Native 官方網站中，推薦入門開發者使用的方式。使用時同時可以到 &lt;a href=&quot;https://expo.io/&quot;&gt;expo.io&lt;/a&gt; 網站註冊一個帳號，這雖然不一定是必要的，但可以在開發時有一些協助的功能。&lt;/p&gt;
&lt;p&gt;優點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開發過程相對簡單，電腦上也不需要安裝 Android Studio 或 Xcode&lt;/li&gt;
&lt;li&gt;已內建許多常用的模組與套件，不需要到處找與測試合適的套件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無法使用需要執行&lt;code class=&quot;language-text&quot;&gt;react-native link&lt;/code&gt;才能安裝的套件&lt;/li&gt;
&lt;li&gt;以 Expo 建立的專案，編譯後會多佔掉一些空間&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;步驟&lt;/h3&gt;
&lt;p&gt;使用 npm 或 yarn 安裝 Expo CLI:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -g expo-cli&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;使用 Expo CLI 建立新的專案:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;expo init my-app&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;使用 Expo CLI 啟動專案:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;expo start&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;App 執行的部份，可以使用實體手機，安裝 Expo 所提供的 App，在同一網路區域中即可執行。也可以使用電腦中安裝的手機模擬器。&lt;/p&gt;
&lt;p&gt;Expo CLI 還有其它相關操作的指令，請參考&lt;a href=&quot;https://docs.expo.io/versions/v32.0.0/workflow/expo-cli/#commands&quot;&gt;這裡的說明, v32.0.0&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意建立專案時的選項，不要選用有&lt;code class=&quot;language-text&quot;&gt;實驗性質(experimental)&lt;/code&gt;字詞的，用這些選項建立出來的專案，可能會有後續的很多問題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;方式二: 使用 Expo CLI 建立專案，然後 eject&lt;/h2&gt;
&lt;h3&gt;說明&lt;/h3&gt;
&lt;p&gt;以原本 Expo CLI 來建立新的專案，但為了要使用自訂的套件，通常是為了某些需要以&lt;code class=&quot;language-text&quot;&gt;react-native link&lt;/code&gt;才能安裝使用的套件。&lt;/p&gt;
&lt;p&gt;這種方式仍然可以使用 Expo CLI 的發佈功能，以及大部份的、內建的 Expo SDK。不過會無法再使用某一些 Expo 所提供的內建功能(例如 push notification(推播通知))，詳請請見&lt;a href=&quot;https://docs.expo.io/versions/v32.0.0/expokit/eject/&quot;&gt;Ejecting to ExpoKit&lt;/a&gt;的詳細說明。&lt;/p&gt;
&lt;p&gt;最重要的一點，電腦中必需要安裝 Android Studio 或 Xcode，App 需要這兩個開發工具來進行編譯才能執行。&lt;/p&gt;
&lt;h3&gt;步驟&lt;/h3&gt;
&lt;p&gt;建立專案的方式與第一個方式相同，建立後使用以下命令作 eject:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;expo eject&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;執行時需要先啟動專案，和之前一樣。這是作為類似開發伺服器的地位:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;expo start&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;至於 App 執行部份，需要用 Android Studio 或 Xcode 開啟專案中的對應目錄(android 或 ios)，然後進行打包(build)與執行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;註: 實際上要花一些時間調整執行環境，例如 ios 部份需要額外安裝 CocoaPods，以及執行&lt;code class=&quot;language-text&quot;&gt;pod install&lt;/code&gt;，而 android 的部份相對簡單。請參考&lt;a href=&quot;https://docs.expo.io/versions/v32.0.0/expokit/expokit/&quot;&gt;Developing With ExpoKit&lt;/a&gt;這裡的說明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;方式三: 使用 React Native CLI&lt;/h2&gt;
&lt;h3&gt;說明&lt;/h3&gt;
&lt;p&gt;這個方式是完全使用 React Native CLI 來建立、執行專案，環境建置過程較為麻煩。電腦中需要先安裝好 Android Studio 或 Xcode 執行環境。&lt;/p&gt;
&lt;p&gt;這個方式比較適合已經對於 Android Studio 或 Xcode 熟悉的開發者。它是一種最原始的建立 React Native 專案的方式，要搭配的套件都需要額外去尋找和安裝。這種方式並不適合入門開發者。&lt;/p&gt;
&lt;h3&gt;步驟&lt;/h3&gt;
&lt;p&gt;參考&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started&quot;&gt;官網的 Getting Started&lt;/a&gt;的說明。&lt;/p&gt;
&lt;h2&gt;方式四: 其它專案樣版&lt;/h2&gt;
&lt;h3&gt;說明&lt;/h3&gt;
&lt;p&gt;ignite 很像上面第三種方式的擴充加強版，它有包裝一些模組(稱為外掛，大約 20 套)到建立的專案中，也有提供一些專案不同的樣版可以選擇。執行時仍然是與第三種方式相同的方式來執行。&lt;/p&gt;
&lt;p&gt;因此，像 ignite 也不適合初學者使用，雖然它內附了不少常用的模組和第三方函式庫工具，對於熟悉這些工具的開發者會較為實用，用它可以節省一些安裝這些工具的時間。&lt;/p&gt;
&lt;p&gt;目前像這種專案樣版計劃，可能只剩下 ignite 還有在更新，其它的計劃(例如 snowflake 或 pepperoni-app-kit)都沒在更新了，已經很久沒有更新的不要再考慮使用。&lt;/p&gt;
&lt;h2&gt;步驟&lt;/h2&gt;
&lt;p&gt;參考&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started&quot;&gt;Ignite CLI Documentation&lt;/a&gt;的說明。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[區域網路用Gatsby Develop測試]]></title><description><![CDATA[測試 Gatsby 時，使用下面的指令只能在同一台機器上用   測試: 如果你想要在同區域網路(或無線網路)的手機、其它電腦上的瀏覽器來測試時，可以改用以下的指令來啟動測試伺服器(-H 是 host 的意思): 之後手機或其它電腦的瀏覽器可以直接輸入 ip…]]></description><link>https://eddychang.me/test-gatsby-in-lan/</link><guid isPermaLink="false">https://eddychang.me/test-gatsby-in-lan/</guid><content:encoded>&lt;p&gt;測試 Gatsby 時，使用下面的指令只能在同一台機器上用 &lt;code class=&quot;language-text&quot;&gt;localhost&lt;/code&gt; 測試:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby develop&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;如果你想要在同區域網路(或無線網路)的手機、其它電腦上的瀏覽器來測試時，可以改用以下的指令來啟動測試伺服器(-H 是 host 的意思):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby develop -H 0.0.0.0 -p 8000&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;之後手機或其它電腦的瀏覽器可以直接輸入 ip 加上埠號來測試，例如&lt;code class=&quot;language-text&quot;&gt;http://192.168.2.105:8000/&lt;/code&gt;就可以看到網站畫面。&lt;/p&gt;
&lt;p&gt;另外也有使用電腦 hostname 的方式，請再參考官方的 Github 中&lt;a href=&quot;https://github.com/gatsbyjs/gatsby/issues/5801&quot;&gt;issue #5801&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Native 中使用 Flexbox 筆記]]></title><description><![CDATA[Flexbox 排版的全名是 Flexible Box Layout Module (彈性的盒排版模組)，是由 W3C 所制定的 CSS3 排版模組。Flexbox…]]></description><link>https://eddychang.me/flex-react-native/</link><guid isPermaLink="false">https://eddychang.me/flex-react-native/</guid><content:encoded>&lt;p&gt;Flexbox 排版的全名是&lt;a href=&quot;https://www.w3.org/TR/css-flexbox/&quot;&gt;Flexible Box Layout Module&lt;/a&gt;(彈性的盒排版模組)，是由 W3C 所制定的 CSS3 排版模組。Flexbox 的目的是提供更有效率的排版、對齊與分佈空格在容器之中的項目，甚至是在項目的尺寸大小是未知或動態的情況。&lt;/p&gt;
&lt;p&gt;Flexbox 排版適合於應用程式中的元件，以及小型規模的排版。W3C 也另外制定了一個&lt;a href=&quot;https://www.w3.org/TR/css-grid-1/&quot;&gt;Grid 排版模組&lt;/a&gt;，這是適合使用於大型規模排版情況。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;註: Flex 的中文意思是”彈性的”、“靈活的”，box 的中文意思是”盒子”、“箱子”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Yoga 專案&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;Yoga&lt;/a&gt; 是一個實作了 Flexbox 的跨平台排版引擎，由 Facebook 主導，前身的名稱為 css-layout。Yoga 主要以 C 語言開發，提供高執行效能與易於整合其它語言，可以讓開發者在不同的平台中使用 Flexbox 來進行排版的工作，主要是應用在手機 App 的開發上，當然它也是目前 React Native 使用的排版引擎。&lt;/p&gt;
&lt;p&gt;Yoga 中採用了與 CSS3 標準裡 Flexbox 相近的語法與方式，但因為 CSS3 中的標準與內容相當多，Yogo 中的 Flexbox 並沒有完全支援所有的特性，而進行部份的簡化，在 React Native 中使用的預設值與網頁上也不相同，所以在使用過程中要特別注意的。&lt;/p&gt;
&lt;h2&gt;Flexbox 使用的英文專業字詞&lt;/h2&gt;
&lt;p&gt;要學習 Flexbox 並不困難，很多內容都是很直覺式的，如果你已經是對網頁設計或 HTML 語法有一定基礎的開發者，很容易就可以學習開始使用。不過，因為這是外國人寫的標準，有一些專有名詞反倒是會造成一知半解的情況，我先把會用到的幾個英文名詞寫在下面，先理解一下這些名詞所代表的意思，後面學習會容易得多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;flex: 有”彈性”、“彎曲”的意思，通常作為動詞用。flexible(彈性的)是這個字詞的形容詞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;axis: 有”坐標軸”、“基準線”的意思。Flexbox 使用 main axis(主基準線)與 cross axis(相反基準線)來區分水平與垂直的兩個不同的基準線，main axis(主基準線)代表的主要的基準線，依照 flexDirection 的屬性來決定主基準線是水平的還是垂直的方向。cross axis(相反基準線)則是與主基準線相反的基準線。基準線代表的是容器(container)中的項目排列時按照的方向規範。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;React Native 預設的方向(flexDirection)是 column，也就是”&lt;strong&gt;垂直的&lt;/strong&gt;“，所以它的主基準線(main axis)預設就是”&lt;strong&gt;垂直的&lt;/strong&gt;“，相反基準線(cross axis)則是水平的。這會與網頁中 CSS 的預設值相反。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;container 與 items: container(容器)中裝有 items(項目)，這兩個在 DOM 元素中有 父母-子女(parent-children) 關係。Flexbox 的排列、對齊、方向等等屬性是在 &lt;strong&gt;container(容器)&lt;/strong&gt; 中定義的，當然這是指對容器中的項目們所作的屬性定義。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;grow、shrink、basis: 這三個是項目的屬性定義值。grow 有”成長”、“變大”的意思，shrink 則有”收縮”、“縮水”的意思。basis 則是”基礎”、“標準”的意思。這三個是用於項目(元件)的”&lt;strong&gt;彈性&lt;/strong&gt;“屬性，也就是在版面或外部容器的尺寸變動時，項目應該如何隨之進行變動。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;React Native 中自 0.42 版後才加入 flexGrow、flexShrink、flexBasis 這三個屬性，使用上會有些複雜，請參考&lt;a href=&quot;https://stackoverflow.com/questions/43143258/flex-vs-flexgrow-vs-flexshrink-vs-flexbasis-in-react-native&quot;&gt;flex vs flexGrow vs flexShrink vs flexBasis in React Native?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;wrap、nowrap、wrap-reverse: wrap 有”包裝”的意思，但用在這裡是代表要不要擠在同一行之中，&lt;code class=&quot;language-text&quot;&gt;nowrap&lt;/code&gt;代表這個容器中的項目是只能擠在同一行之中，&lt;code class=&quot;language-text&quot;&gt;wrap&lt;/code&gt;則是允許多行。&lt;code class=&quot;language-text&quot;&gt;wrap-reverse&lt;/code&gt;與&lt;code class=&quot;language-text&quot;&gt;wrap&lt;/code&gt;一樣可以允許多行，但開始與結束會顛倒過來。&lt;code class=&quot;language-text&quot;&gt;-reverse&lt;/code&gt;字詞很常見，它是”顛倒”的意思。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;align-items、align-self、align-content: align 是”對齊”的意思。align-self 是用於項目(元件)的屬性，align-items 與 align-content 是用於容器的屬性，都是用來作對齊使用的。這幾個都是應用在 cross axis(相反基準線)時。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;stretch: “伸展”的意思，用在這是是填好填滿的意思。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;justify-content: justify 也有”對齊”的意思，它是用在 main axis(主基準線)時的對齊。這是用於容器的屬性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flow: flow 是”流動”的意思，在這裡的意思是排列的情況。flex-flow 是 flex-direction 與 flex-wrap 的組合簡寫法，合稱&lt;code class=&quot;language-text&quot;&gt;dw&lt;/code&gt;。(註: React Native 中沒這個屬性)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;order: “順序”的意思，項目(元件)的屬性，代表這個項目(元件)在容器中的排列次序。(註: React Native 中沒這個屬性)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;justifyContent 詳細說明&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;預設值: &lt;code class=&quot;language-text&quot;&gt;flex-start&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;justifyContent&lt;/code&gt;是針對 main axis(主基準線)的對齊，對 React Native 來說，main axis(主基準線)預設是從上到下的垂直方向。有以下幾個屬性值可使用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start (預設值): 以開始線來對齊，例如從右至左的排列方向，最右邊即是開始線。&lt;/li&gt;
&lt;li&gt;flex-end: 以結束線來對齊，和上面的屬性顛倒。&lt;/li&gt;
&lt;li&gt;center: 以中線來對齊。&lt;/li&gt;
&lt;li&gt;space-between: 項目會平均分散對齊，第一個項目會位於開始線，最後一個項目位於結束線。&lt;/li&gt;
&lt;li&gt;space-around: 項目會平均分散對齊，每個項目之間約有二個單位的空格，第一個項目會與開始線之間有一個單位的空格，最後一個項目與結束線之間也有一個單位的空格。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;alignItems&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;預設值: &lt;code class=&quot;language-text&quot;&gt;stretch&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;特別注意: 預設情況(水平方向)如果給定 width 屬性，會導致設置 &lt;code class=&quot;language-text&quot;&gt;stretch&lt;/code&gt; 值無效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;重點: alignItems 是 justifyContent 的相反屬性(不要誤以為是 alignContent)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;alignItems&lt;/code&gt;則是針對 cross axis(相反基準線)的對齊，對 React Native 來說，cross axis(相反基準線)預設是從左到右的水平方向。適合於項目是單行排列的情況。有以下幾個屬性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start: 以 cross axis(相反基準線)的開始線來對齊。&lt;/li&gt;
&lt;li&gt;flex-end: 以 cross axis(相反基準線)的結束線來對齊。&lt;/li&gt;
&lt;li&gt;center: 以 cross axis(相反基準線)的中心線來對齊。&lt;/li&gt;
&lt;li&gt;baseline: 項目會依照它們的 baseline 來對齊。(baseline 預設是 DOM 元素呈現的最下面位置)&lt;/li&gt;
&lt;li&gt;stretch (預設值): 伸展填好填滿容器(注意仍然會受到 min-width/max-width 的限制，也就是項目的高度或寬度限制)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;alignContent&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: alignContent 只有在項目被 flexWrap 包裹(wrapped)成為多行排列時，才會發生作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;alignContent&lt;/code&gt;也是針對 cross axis(相反基準線)的對齊對 React Native 來說，cross axis(相反基準線)預設是從左到右的水平方向。它適合於 cross axis(相反基準線)有空白的情況，以及項目是以多行排列的情況。&lt;/p&gt;
&lt;p&gt;屬性值與&lt;code class=&quot;language-text&quot;&gt;justifyContent&lt;/code&gt;類似，但多了一個 stretch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start: 以開始線來對齊，例如從右至左的排列方向，最右邊即是開始線。&lt;/li&gt;
&lt;li&gt;flex-end: 以結束線來對齊，和上面的屬性顛倒。&lt;/li&gt;
&lt;li&gt;center: 以中線來對齊。&lt;/li&gt;
&lt;li&gt;space-between: 項目會平均分散對齊，第一個項目會位於開始線，最後一個項目位於結束線。&lt;/li&gt;
&lt;li&gt;space-around: 項目會平均分散對齊，每個項目之間約有二個單位的空格，第一個項目會與開始線之間有一個單位的空格，最後一個項目與結束線之間也有一個單位的空格。&lt;/li&gt;
&lt;li&gt;stretch (預設值): 伸展填好填滿容器(注意仍然會受到 min-width/max-width 的限制，也就是項目的高度或寬度限制)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;項目的自我對齊&lt;code class=&quot;language-text&quot;&gt;alignSelf&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: 這是單個&lt;strong&gt;項目&lt;/strong&gt;用來覆蓋&lt;strong&gt;容器&lt;/strong&gt;裡的&lt;code class=&quot;language-text&quot;&gt;alignItems&lt;/code&gt;值，有必要才會使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個自我對齊&lt;code class=&quot;language-text&quot;&gt;alignSelf&lt;/code&gt;項目屬性是用來覆蓋在容器裡設定的&lt;code class=&quot;language-text&quot;&gt;alignItems&lt;/code&gt;，作為個別項目自己的對齊方式，除非有必要才會使用。預設值是&lt;code class=&quot;language-text&quot;&gt;auto&lt;/code&gt;，其他屬性與&lt;code class=&quot;language-text&quot;&gt;alignItems&lt;/code&gt;一樣:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;auto (預設值): 自動。&lt;/li&gt;
&lt;li&gt;flex-start: 以 cross axis(相反基準線)的開始線來對齊。&lt;/li&gt;
&lt;li&gt;flex-end: 以 cross axis(相反基準線)的結束線來對齊。&lt;/li&gt;
&lt;li&gt;center: 以 cross axis(相反基準線)的中心線來對齊。&lt;/li&gt;
&lt;li&gt;baseline: 項目會依照它們的 baseline 來對齊。(baseline 預設是 DOM 元素呈現的最下面位置)&lt;/li&gt;
&lt;li&gt;stretch: 伸展填好填滿容器(注意仍然會受到 min-width/max-width 的限制，也就是項目的高度或寬度限制)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Flexbox 定義步驟說明&lt;/h2&gt;
&lt;h3&gt;第零步: 容器與項目的標記&lt;/h3&gt;
&lt;p&gt;Flexbox 需要有容器與項目的層級結構，才能進行相對的排版，例如以下的範例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;第一步: 定義容器&amp;#x26;項目的屬性&lt;code class=&quot;language-text&quot;&gt;flex: 1&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;所有的 View 元件預設是&lt;code class=&quot;language-text&quot;&gt;flex: 0&lt;/code&gt;，所以你要自行定義&lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt;值才能進行排版。定義之後，容器會有一些預設的屬性加上，即使你沒有寫上&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; styles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; StyleSheet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  container&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    backgroundColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#ccc&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  row&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;container 會有以下的自動(預設)的屬性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flexDirection: ‘column’&lt;/li&gt;
&lt;li&gt;flexWrap: ‘nowrap’&lt;/li&gt;
&lt;li&gt;justifyContent: ‘flex-start’&lt;/li&gt;
&lt;li&gt;alignItems: ‘stretch’&lt;/li&gt;
&lt;li&gt;alignContent: ‘flex-start’ (註: 需要配合 &lt;code class=&quot;language-text&quot;&gt;flexWrap: &amp;#39;wrap&amp;#39;&lt;/code&gt; 出現多列時才會有效果)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此可知這樣設定，會出現以下的排版:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flex:1&lt;/code&gt; 相當於 &lt;code class=&quot;language-text&quot;&gt;height: 100%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;alignItems: &amp;#39;stretch&amp;#39;&lt;/code&gt; 相當於 &lt;code class=&quot;language-text&quot;&gt;width: 100%&lt;/code&gt; (每個項目)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;第二步: 定義容器的&lt;code class=&quot;language-text&quot;&gt;flexDirection&lt;/code&gt;，控制主基準線是垂直還水平方向&lt;/h3&gt;
&lt;p&gt;flexDirection 在 RN 中預設是 column，也就是垂直排列(由上到下)的。&lt;/p&gt;
&lt;h3&gt;第三步: 定義容器的&lt;code class=&quot;language-text&quot;&gt;flexWrap&lt;/code&gt;，控制裡面的項目是單行還多行排序。&lt;/h3&gt;
&lt;p&gt;flexWrap 在 RN 中預設是 nowrap，也就是單列或單行的排列。&lt;/p&gt;
&lt;h3&gt;項目所佔比例&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;flex 的數值相當於 flex-grow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用 flex 的數值，可以劃分出每個項目所佔的比例值，例如下面的例子會讓後面兩列佔的比例為 2/(1+1+2+2) 也就是 1/3，前面兩列為 1/6:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;使用對應的比例數字也是相同的結果:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.16&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.16&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.33&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.33&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;註: 當 flex 數字為小數點數字，但沒有加起來剛好為 1 時，會呈現有多餘空間的情況。所以使用整數可能會是比較好的比例劃分方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;註: 由於在垂直排列(flexDirection: column)時，flexbox 取代了 height 的樣式定義方式，所以再對 View 定義 height 是不會有作用的，例如將上面例子中的 Row-1 改為下面的設定，你會發現 height 不管設大或設小都沒作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View
  style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    width&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    height&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    backgroundColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#ff0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Row&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;註: 只有 View 元件可以使用 flexbox 排版，Text 元件有自己的排版方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;註: 使用 StyleSheet 建立和直接使用物件字面定義的樣式有不同之處，上面範例只是為了展示之用，正常情況下仍然建議使用 StyleSheet 來建立。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;flexbox in RN&lt;/h2&gt;
&lt;h3&gt;與 CSS3 相較的不同處&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;flexDirection 預設為&lt;code class=&quot;language-text&quot;&gt;column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;alignItems 預設為&lt;code class=&quot;language-text&quot;&gt;stretch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;flex 只能用&lt;strong&gt;一個數字&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;預設情況&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;
      &lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; border-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; column&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; stretch&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;flex-shrink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;align-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex-start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex-start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 solid black&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;flex 是預設的，所有呈現都是 flexbox。只是預設值是&lt;code class=&quot;language-text&quot;&gt;flex: 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上面的每個元素都是&lt;code class=&quot;language-text&quot;&gt;position: relative&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;額外說明: flex 數字意義&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;註: flex 通常是&lt;code class=&quot;language-text&quot;&gt;flex: 1&lt;/code&gt;。這與 CSS3 中的 flex 定義方式不同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只能使用一個數字。(flex ReactPropTypes.number)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正數&lt;/strong&gt;代表元件是有”彈性的”，會隨著尺寸等比例放大，例如設為 2 的元件佔的大小是 1 的兩倍。類似於&lt;code class=&quot;language-text&quot;&gt;flexGrow&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;當為&lt;strong&gt;0&lt;/strong&gt;時，代表元件沒有彈性，只是對應所設置的寬與高度。&lt;/p&gt;
&lt;p&gt;當為&lt;strong&gt;-1&lt;/strong&gt;時，代表元件一般情況對應所設置的寬與高度，當空間不足時會縮小(shrink)到 minWidth 與 minHeight。類似於&lt;code class=&quot;language-text&quot;&gt;flexShrink&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你想要某個元件佔 25%，另一個元件佔 75%，就用&lt;code class=&quot;language-text&quot;&gt;flex: 1/4&lt;/code&gt;與&lt;code class=&quot;language-text&quot;&gt;flex: 3/4&lt;/code&gt;分別指定兩個元件。&lt;/p&gt;
&lt;h3&gt;額外說明: alignItems&lt;/h3&gt;
&lt;p&gt;alignItems 要有作用(stretch，填好填滿)，子元素必須沒有設定對應 cross axis(相反基準線)的寬度(或高度)才會有作用。&lt;/p&gt;
&lt;h3&gt;小抄&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;最前面一個值為 RN 預設值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# Choose the main axis:
flexDirection: &amp;#39;column&amp;#39; || &amp;#39;row&amp;#39;

# Align the main axis:
justifyContent: &amp;#39;flex-start&amp;#39; || &amp;#39;flex-end&amp;#39; || &amp;#39;center&amp;#39; || &amp;#39;space-around&amp;#39; || &amp;#39;space-between&amp;#39;

# Align the cross axis:
alignItems: &amp;#39;stretch&amp;#39; || &amp;#39;flex-start&amp;#39; || &amp;#39;flex-end&amp;#39; || &amp;#39;center&amp;#39;

# Align individual elements:
alignSelf: &amp;#39;flex-start&amp;#39; || &amp;#39;flex-end&amp;#39; || &amp;#39;center&amp;#39; || &amp;#39;stretch&amp;#39; || &amp;#39;auto&amp;#39;

# Give it a wrap:
flexWrap: &amp;#39;nowrap&amp;#39; || &amp;#39;wrap&amp;#39;

# Define relative fluidity of an element:
flex: number (e.g. 1, 1/2)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;議題&lt;/h2&gt;
&lt;h3&gt;全寬度 &amp;#x26; 全高度&lt;/h3&gt;
&lt;p&gt;方法一: 用 alignSelf: “stretch”可以設定某個元件用全寬度或全高度:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;line1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    backgroundColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#FDD7E4&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    alignSelf&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;stretch&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    textAlign&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;center&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;方法二: 用 Dimensions 可以獲得，不一定得要用 flex 來設定:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  AppRegistry&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  Dimensions
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Dimensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;window&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//full width&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Dimensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;window&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//full height&lt;/span&gt;


line1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    backgroundColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#FDD7E4&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    width&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;一些密訣&lt;/h2&gt;
&lt;p&gt;If the element has a parent container, child element can be positioned with Flex item property — &lt;code class=&quot;language-text&quot;&gt;align-self&lt;/code&gt; inside parent container still being Flex container, behaving and accepting Flex container properties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flex container children always follows parent container Main Axis direction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hint: to prevent expanding full width after declaring flex: 1, use maxWidth/maxHeight property.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;狀態列高度&lt;/h2&gt;
&lt;p&gt;由於目前手機都有狀態列在最上面(垂直排列時)，使用 expo 所提供的常數 Constants.statusBarHeight 可以取得這個高度，範例如下:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; View&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; StyleSheet &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-native&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Constants &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;expo&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Button &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-native-elements&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@expo/vector-icons&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Button title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Yea&quot;&lt;/span&gt; containerViewStyle&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;100%&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; marginLeft&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; styles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; StyleSheet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  container&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    flex&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    justifyContent&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;center&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    paddingTop&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Constants&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusBarHeight&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    backgroundColor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#ecf0f1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;flex vs flexGrow vs flexShrink vs flexBasis in React Native?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/43143258/flex-vs-flexgrow-vs-flexshrink-vs-flexbasis-in-react-native&quot;&gt;https://stackoverflow.com/questions/43143258/flex-vs-flexgrow-vs-flexshrink-vs-flexbasis-in-react-native&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[中文輸入法與React文字輸入框的問題與解決方案]]></title><description><![CDATA[問題來源是來自這個 React 官方儲存庫的 issue  #3926 ，與這個議題關聯的有很多其他的 issue，來自許多專案，有些是與 React 相關，有些則是 vue 或其它 JS 套件。也已經有其他的專案是專注於解決這個問題，例如 react-composition…]]></description><link>https://eddychang.me/react-chinese-ime-issue/</link><guid isPermaLink="false">https://eddychang.me/react-chinese-ime-issue/</guid><content:encoded>&lt;p&gt;問題來源是來自這個 React 官方儲存庫的 issue &lt;a href=&quot;https://github.com/facebook/react/issues/3926&quot;&gt;#3926&lt;/a&gt;，與這個議題關聯的有很多其他的 issue，來自許多專案，有些是與 React 相關，有些則是 vue 或其它 JS 套件。也已經有其他的專案是專注於解決這個問題，例如&lt;a href=&quot;https://github.com/fast-flow/react-composition&quot;&gt;react-composition&lt;/a&gt;，不過它是一個使用 ES5 語法的 React 元件。在其他的討論區上也有類似的&lt;a href=&quot;http://react-china.org/t/onchange-input/3385&quot;&gt;問題與解答&lt;/a&gt;。本文的目的是希望能針對這個問題提供一些說明、現在暫時性的解決方案。&lt;/p&gt;
&lt;p&gt;下圖為目前解決 React 中”Controlled”(受控制的)input 元件的展示，可以到&lt;a href=&quot;https://eyesofkids.github.io/&quot;&gt;這裡&lt;/a&gt;去測試:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/demo-e4cac1ad946f6171fcef5835c107b9e1.gif&quot; alt=&quot;展示&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意事項: 目前的解決方案我認為是暫時性的，結果都放在這個&lt;a href=&quot;https://github.com/eyesofkids/react-compositionevent&quot;&gt;github 庫&lt;/a&gt;上。這要分為”Controlled”(受控制的)與”Uncontrolled”(不受控制的)兩個種類的元件，影響的主要是 input 與 textarea 兩個元件，輸入法(IME, input method editor)的問題，不只會發生在中文，同樣的在日文、韓文或其它使用輸入法的語言應該都有同樣問題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;問題何來&lt;/h2&gt;
&lt;p&gt;React 元件主要使用&lt;code class=&quot;language-text&quot;&gt;onChange&lt;/code&gt;人造事件，作為文字輸入框(input)或文字輸入區域(textarea)觸發文字輸入時的事件，這個事件用起來很直覺，理應當是如此。但&lt;code class=&quot;language-text&quot;&gt;onChange&lt;/code&gt;在瀏覽器上，只要在這個文字輸入框上，有任何的鍵盤動作它都會觸發，也就是如果你是使用了中文、日文、韓文輸入法(IME)，不論是哪一種，拼音的、筆劃的還是其他的，只要有按下一個鍵盤的動作，就會觸發一次瀏覽器上這個元素的&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件，對於原本就使用鍵盤上的英文字元作為輸入的語言來說，這沒什麼太大的問題，但對於要使用輸入法的語言使用者來說，不停的觸發&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件，可能會造成程式功能上的運行邏輯問題。&lt;/p&gt;
&lt;p&gt;舉出一個實際的應用情況，一個使用 React 撰寫的搜尋電腦書籍的功能，使用者可以在文字輸入框裡輸入要搜尋的書名，程式中是利用&lt;code class=&quot;language-text&quot;&gt;onChange&lt;/code&gt;事件觸發，進行比對資料庫中的書籍標題，當你想搜尋一本名為”林哥的 Java 教學”，第一個字為”林”，拼音輸入法需要輸入”lin”三個鍵盤上的字元，在”林”這個字從輸入法編輯器中加到真正的 input 元素前，&lt;code class=&quot;language-text&quot;&gt;onChange&lt;/code&gt;已經捕捉到”lin”三個字元，在列表中已搜尋出一大堆有關”linux”的書籍。細節就不說了，還有可能對字元數量的的檢查之類的問題。不過，這是正確的程式運作邏輯嗎?很明顯的這是一個大問題。&lt;/p&gt;
&lt;p&gt;當然，你也可以用對中文字詞檢查的修正方式，或是乾脆不要用&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件，改用其他按鈕觸發之類的事件來作這事情，或是不要用 React 中的”Controlled”(受控制的)input 或 textare 元件，但這會局限住在程式開發應用上的自由，要如何選擇就看你自己了，是不要使用它還是想辦法正視問題來解決它。&lt;/p&gt;
&lt;h2&gt;網頁上的 DOM 元素與”Uncontrolled”(不受控制的)的元件&lt;/h2&gt;
&lt;p&gt;這個問題在瀏覽器中，早就已經有了可應對的解決方法，DOM 事件中有一組額外的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent&quot;&gt;CompositionEvent&lt;/a&gt;(組成事件)可以輔助開發者，它可以在可編輯的 DOM 元素上觸發，主要是 input 與 textarea 上，所以可以用來輔助解決&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件的輸入法問題。CompositionEvent(組成事件)共有三個事件，分別為&lt;code class=&quot;language-text&quot;&gt;compositionstart&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;compositionupdate&lt;/code&gt;與&lt;code class=&quot;language-text&quot;&gt;compositionend&lt;/code&gt;，它們代表的是開始進行字的組成、更新與結束，也就是代表開始以輸入法編輯器來組合鍵盤上的英文字元，選字或更新字的組合，到最後輸出字到真實 DOM 中的文字輸入框中，實務上每個中文字在輸入時，&lt;code class=&quot;language-text&quot;&gt;compositionstart&lt;/code&gt;與&lt;code class=&quot;language-text&quot;&gt;compositionend&lt;/code&gt;都只會會被觸發一次，而&lt;code class=&quot;language-text&quot;&gt;compositionupdate&lt;/code&gt;則是有可能多次觸發。&lt;/p&gt;
&lt;p&gt;藉由 CompositionEvent 的輔助來解決的方式，也就是說在網頁上的 input 元素，可以利用 CompositionEvent 作為一個信號，如果正在使用 IME 輸入中文時，&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件中的程式碼就先不要執行，等&lt;code class=&quot;language-text&quot;&gt;compositionend&lt;/code&gt;觸發時，接著的&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件才可以執行其中的程式碼，運作的原理就是這樣簡單而已。&lt;/p&gt;
&lt;p&gt;在 React 應用中，如果是一個”Uncontrolled”(不受控制的)的 input 元件，它與網頁上真實 DOM 中的 input 元素的事件行為無差異，也就是說，直接使用 CompositionEvent 的解決方式，就可以解決這個輸入法的問題，以下面的程式碼為範例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// @flow&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Cinput&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// record if is on Composition&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isOnComposition&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; boolean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleComposition&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; KeyboardEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;compositionend&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// composition is end&lt;/span&gt;
      isOnComposition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// in composition&lt;/span&gt;
      isOnComposition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleChange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; KeyboardEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// only when onComposition===false to fire onChange&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLInputElement&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isOnComposition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      onCompositionStart&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleComposition&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      onCompositionUpdate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleComposition&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      onCompositionEnd&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleComposition&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Cinput&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;上面這是一個典型的”Uncontrolled”(不受控制的)input 元件，主要是它不用&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;這個屬性。但如果它有來自上層元件的&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;屬性與值，也就是上層元件用 props 傳遞給它&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;屬性的值，就成了”Controlled”(受控制的)元件，它的事件整個模式就會與網頁上的真實 DOM 中的 input 元素不一樣，這後面再說明。&lt;/p&gt;
&lt;p&gt;這個解決方案在幾乎所有能支援 CompositionEvent 的瀏覽器(IE9 以上)都可以運行得很好，不過在 Google Chrome 瀏覽器在 2016 年的版本 53 之後，更動了&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;與&lt;code class=&quot;language-text&quot;&gt;compositionend&lt;/code&gt;的&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/afce9d93e76f2ff81baaa088a4ea25f67d1a76b3%5E%21/&quot;&gt;觸發順序&lt;/a&gt;，所以需要針對 Chrome 瀏覽器調整一下，如果是在 Chrome 瀏覽器中觸發&lt;code class=&quot;language-text&quot;&gt;compositionend&lt;/code&gt;時，也要執行一次在原本在&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;要執行的程式碼，就改成這樣而已。下面在上個程式碼中的&lt;code class=&quot;language-text&quot;&gt;handleComposition&lt;/code&gt;函式中，多加了偵測是否為 Chrome 瀏覽器，與觸發原本的 onChange 方法程式碼，修改過的程式碼如下:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// detect it is Chrome browser?&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isChrome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;chrome &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;chrome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webstore

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleComposition&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; KeyboardEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;compositionend&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// composition is end&lt;/span&gt;
    isOnComposition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// fixed for Chrome v53+ and detect all Chrome&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// https://chromium.googlesource.com/chromium/src/&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// +/afce9d93e76f2ff81baaa088a4ea25f67d1a76b3%5E%21/&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLInputElement&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isOnComposition &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isChrome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// fire onChange&lt;/span&gt;
      props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// in composition&lt;/span&gt;
    isOnComposition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;“Uncontrolled”(不受控制的)input 或 textarea 元件，解決方式就是這麼簡單而已，利用 CompositionEvent 過濾掉不必要的&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;註: 其它的解決方式還有，像&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/InputEvent&quot;&gt;InputEvent&lt;/a&gt;中有一個&lt;code class=&quot;language-text&quot;&gt;isComposing&lt;/code&gt;屬性，它也可以作為偵測目前是否正在進行輸入法的組字工作，但 InputEvent 事件目前只有 Firefox 中可以用，看起來沒什麼前景。另外，W3C 新提出的&lt;a href=&quot;https://www.w3.org/TR/ime-api/&quot;&gt;IME API&lt;/a&gt;或許是一個未來較佳的解決方案，但目前只有&lt;a href=&quot;https://blogs.msdn.microsoft.com/ie/2014/03/31/building-better-input-experience-for-east-asian-users-with-the-ime-api-in-ie11/&quot;&gt;IE11 有實作&lt;/a&gt;，其他瀏覽器品牌都沒有。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;“Controlled”(受控制的)的元件&lt;/h2&gt;
&lt;p&gt;在 React 應用中，使用”Controlled”(受控制的)的 input 或 textarea 元件是另一回事，它會開始複雜起來。&lt;/p&gt;
&lt;p&gt;“Controlled”(受控制的)的元件並不是只有加上&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;這個屬性這麼簡單，input 或 textarea 元件所呈現的值，主要會來自 state，state 有可能是上層元件的，利用 props 一層層傳遞過來的，或是這個元件中本身就有的 state，直接指定給在這個元件中的 render 中的 input 或 textarea 元件。也就是說，input 最後呈現的文字如果要進行改變，就需要改變到元件(不論在何處)的 state，要改變 state 只有透過 setState 方法，而 setState 方法有可能是個異步(延時)執行的情況。&lt;/p&gt;
&lt;p&gt;把這整個流程串接在一起後，我相信事件觸發的不連續情況會變得很嚴重，需要對不同情況下作測試與評估。目前我所作的測試還只是最基本的元件運用而已，複雜的元件情況還沒有開始進行。因為 state 有很多種用途，有時候內部使用，有時候要對外部使用者輸入介面的事件，或是有時候要對伺服器端的資料接收或傳送，不論是不是要使用 Redux、MobX 或 Flux 之類的 state 容器函式庫或框架，最終要進行重新渲染的工作，還是得呼叫 React 中的 setState 方法才行。&lt;/p&gt;
&lt;p&gt;在基本的測試時，我發現”Controlled”(受控制的)的 input 元件，它不僅事件觸發不連續的情況嚴重，而且有可能在不同瀏覽器上會有不同的結果。完全不會有問題的只有一個瀏覽器，就是上面註解中所說的已經實作出&lt;a href=&quot;https://www.w3.org/TR/ime-api/&quot;&gt;IME API&lt;/a&gt;的 IE11，IE11 上可能根本不需要任何解決方案，它的輸入法編輯器是獨立於瀏覽器上的文字輸入框之外的。&lt;/p&gt;
&lt;p&gt;目前已測試的結果是有三種情況，“Chrome, Opera, IE, Edge”為一種，“Firefox”為一種，“Safari”為一種。我為這三種情況分別寫了不同的解決方式的程式碼，但這個事件觸發的不連續情況，現在無法有一致性的解決方案，我只能推測這大概可能是 React 內部設計的問題。&lt;/p&gt;
&lt;p&gt;不論是三種的那一種解決方案，有一個重點是你不能像上面的一般性解決方案，阻擋&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件時要執行的程式碼，也就是阻擋&lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;變動&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;值，因為只要一經阻擋，&lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;元件的&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;值就指定不到值，而且也不會觸發重新渲染。所以你只能讓&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件不斷觸發，就像往常一樣。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那麼要如何解決程式邏輯運作的問題？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我使用了另一個內部的 state 物件中的值，稱為&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;，它是對比在 input 元件上不斷因觸發&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件而輸入的值，稱為&lt;code class=&quot;language-text&quot;&gt;inputValue&lt;/code&gt;。&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;是個會經過 CompositionEvent 修正過的值，所以它永遠不會帶有在輸入法組字過程的字串值。&lt;/p&gt;
&lt;p&gt;這個解決方案，是一個”掛羊頭賣狗肉”的用法，不論使用者在 input 元件如何輸入，輸入的過程都會改變&lt;code class=&quot;language-text&quot;&gt;inputValue&lt;/code&gt;而已，&lt;code class=&quot;language-text&quot;&gt;inputValue&lt;/code&gt;是一個暫存與呈現用的值，最終用來進行程式邏輯運算的是&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;。以最一開始的例子來說，使用者輸入”林哥的 Java 教學”，在一開始的”林”字輸入時，&lt;code class=&quot;language-text&quot;&gt;inputValue&lt;/code&gt;是從”lin”到輸入完成變為”林”，而&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;是在輸入期間是空字串值，輸入完成才會變為”林”。所以，搜尋功能可以用&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;來作為運算的依據，用這個值來搜尋對應的資料，這才是正確的運算邏輯，因為&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;才是真正的不帶輸入法組字過程的值。&lt;/p&gt;
&lt;p&gt;大致上說明一下解決方式的程式碼，首先它有兩個在這個模組作用域中的全域變數，一個用來記錄是否在輸入法的組字過程中，另一個是給專給 Safari 瀏覽器用的:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// if now is in composition session&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isOnComposition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// for safari use only, innervalue can&apos;t setState when compositionend occurred&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isInnerChangeFromOnChange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;在專門處理&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件的&lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt;方法中，判斷&lt;code class=&quot;language-text&quot;&gt;isInnerChangeFromOnChange&lt;/code&gt;這一段是專門為了解決 Safari 瀏覽器的問題所寫，Safari 瀏覽器的行為是 CompositionEvent 在觸發時，其中的&lt;code class=&quot;language-text&quot;&gt;event.target.value&lt;/code&gt;居然是組字過程中的英文字元，而不是觸發這個事件的 input 元素的所有字串，這也是特別怪異的地方，所以才會利用在&lt;code class=&quot;language-text&quot;&gt;compositionend&lt;/code&gt;後會再觸發一次&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;的特性，在這裡更新&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;後面的程式碼，是代表在輸入法的組字過程中，setState 方法使用的差異，在組字過程中(&lt;code class=&quot;language-text&quot;&gt;isOnComposition === true&lt;/code&gt;)的話，只會更動&lt;code class=&quot;language-text&quot;&gt;inputValue&lt;/code&gt;值，而不會更動到&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;的值，這對應了上述所說的一個運作過程，一般的輸入鍵盤上的字元時不會有輸入法的問題，則是兩個值一併更動。程式碼如下:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;handleChange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// console.log(&apos;change type &apos;, e.type, &apos;, target &apos;, e.target, &apos;, target.value &apos;, e.target.value)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Flow check&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLInputElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isInnerChangeFromOnChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; inputValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; innerValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    isInnerChangeFromOnChange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// when is on composition, change inputValue only&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// when not in composition change inputValue and innerValue both&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isOnComposition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      inputValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      innerValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; inputValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;在專門處理&lt;code class=&quot;language-text&quot;&gt;composition&lt;/code&gt;事件的&lt;code class=&quot;language-text&quot;&gt;handleComposition&lt;/code&gt;方法中，主要是為了在&lt;code class=&quot;language-text&quot;&gt;compositionend&lt;/code&gt;觸發時，進行更新&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;所撰寫的一些程式碼。在第一種情況時，也就是在 Chrome, IE, Edge, Opera 瀏覽器時，只需要直接用&lt;code class=&quot;language-text&quot;&gt;e.target.value&lt;/code&gt;更新&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;即可。在第二種情況是 Firefox，它不知道為什麼會掉值，所以還需要幫它再一併更新&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;一次。第三種情況，上面有說過了，特別的怪異情況，所以對&lt;code class=&quot;language-text&quot;&gt;innerValue&lt;/code&gt;的更新改到&lt;code class=&quot;language-text&quot;&gt;compositionend&lt;/code&gt;之後的那個&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件去作了。程式碼如下:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;handleComposition&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// console.log(&apos;type &apos;, e.type, &apos;, target &apos;, e.target, &apos;,target.value &apos;, e.target.value, &apos;, data&apos;, e.data)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Flow check&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLInputElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;compositionend&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Chrome is ok for only setState innerValue&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Opera, IE and Edge is like Chrome&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isChrome &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; isIE &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; isEdge &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; isOpera&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; innerValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Firefox need to setState inputValue again...&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isFirefox&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; innerValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; inputValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Safari think e.target.value in composition event is keyboard char,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// but it will fire another change after compositionend&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isSafari&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// do change in the next change event&lt;/span&gt;
      isInnerChangeFromOnChange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    isOnComposition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    isOnComposition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;註: 目前這個暫時的解決方式，其方式並不是參考自&lt;a href=&quot;https://github.com/fast-flow/react-composition&quot;&gt;react-composition&lt;/a&gt;項目，解決方式雖然有些類似，但 react-composition 用的是 ES5 的 React 工廠樣式元件語法，我對這種語法並不熟悉。在寫這篇文章時，才仔細看了一下 react-composition 的程式碼，只能說它的作者實際上也有測試過這個問題，也知道只有用另一個 state 中的值才能解決這問題。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;p&gt;如果你是使用”Uncontrolled”(不受控制的)的元件，那麼解決方法很簡單，就如同上面所說的，像一般的網頁上的 DOM 元素的解決方式即可。&lt;/p&gt;
&lt;p&gt;但對於”Controlled”(受控制的)的元件來說，目前的解決方案是一種 try-and-error(試誤法)的暫時性解決方案，我目前只能按照已測試的平台與瀏覽器去修正，沒測過的瀏覽器與平台，就不得而知了。&lt;/p&gt;
&lt;p&gt;關於這個”Controlled”(受控制的)的元件的事件觸發，目前看到有在不同瀏覽器上的事件觸發不連續情況，我也有發一個&lt;a href=&quot;https://github.com/facebook/react/issues/8683&quot;&gt;議題(Issue)&lt;/a&gt;給 React 官方。或許比較好的治本方案，是需要從 state 更動方式的內部程式碼，或是人造事件觸發的順序，進行一些調整，這超出我的能力範圍，就有待開發團隊的回應了。&lt;/p&gt;
&lt;p&gt;最後，如果你正好有需要到這個功能，或是你認為這個功能有需要，你可以幫忙測試看看或是提供一些建議。我已經把所有的程式碼、展示、線上測試、解決方案都集中到這個 Github 庫的&lt;a href=&quot;https://github.com/eyesofkids/react-compositionevent&quot;&gt;react-compositionevent&lt;/a&gt;中。或許你現在需要一個解決方案，你可以用裡面目前的暫時性解決方式試試也可以。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[SCSS 15分鐘入門]]></title><description><![CDATA[前言 SCSS(Sassy CSS，時髦的 CSS)是 SASS 中的一種新式語法，SASS 則是一種針對 CSS 的腳本程式語言，藉由提供程式語言的特性，例如變數、巢狀結構、混合、函式與擴充(繼承)等等，可以預先對 CSS 進行結構化的工作，最後再編譯的網頁上可使用的 CSS…]]></description><link>https://eddychang.me/learn-scss-in-15-mins/</link><guid isPermaLink="false">https://eddychang.me/learn-scss-in-15-mins/</guid><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;SCSS(Sassy CSS，時髦的 CSS)是 SASS 中的一種新式語法，SASS 則是一種針對 CSS 的腳本程式語言，藉由提供程式語言的特性，例如變數、巢狀結構、混合、函式與擴充(繼承)等等，可以預先對 CSS 進行結構化的工作，最後再編譯的網頁上可使用的 CSS 語法。&lt;/p&gt;
&lt;h2&gt;內容&lt;/h2&gt;
&lt;p&gt;SCSS 使用和 CSS 一樣的區塊({})與定義結尾(;)語法，它是基於 CSS 語法的超集(superset)，如果你已經有一些 CSS 語法的基礎，學習 SCSS 會很容易，雖然它有一些類似程式語言的語法，但都相當簡單易用，並沒有太複雜的語法。為了與之前的 SASS 語法作區分，檔案的副檔名使用.scss。(舊語法則使用.sass)&lt;/p&gt;
&lt;p&gt;SCSS 本身需要使用命令列工具進行編譯，這些工具可以與現有的程式開發或網頁編輯程式作搭配使用，支援很多也很廣泛，也有網頁版的線上編輯工具如&lt;a href=&quot;http://www.sassmeister.com/&quot;&gt;SassMeister&lt;/a&gt;或&lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;，或是專用圖形化介面應用程式。要在自己的電腦上使用 SCSS 通常需要使用兩種工具，一個是用於編譯 SCSS 檔案為 CSS 檔案的”&lt;strong&gt;編譯工具&lt;/strong&gt;“，另一個則是對 SCSS 程式碼的”&lt;strong&gt;語法檢查工具&lt;/strong&gt;“。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下的 SCSS 範例，你可以先使用&lt;a href=&quot;http://www.sassmeister.com/&quot;&gt;SassMeister&lt;/a&gt;來複製貼上看看編譯的成果，後面的內容有附工具安裝的說明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;變數與運算&lt;/h3&gt;
&lt;p&gt;可以用錢號($)來定義變數，用冒號(:)來指定變數的值，這與 CSS 定義屬性值很相似。在檔案中的其他地方就使用這些變數值。&lt;/p&gt;
&lt;p&gt;變數的命名通常使用在 CSS 中常見的屬性名稱寫法，也就是用連接號(-)與全小寫英文，例如&lt;code class=&quot;language-text&quot;&gt;$second-color&lt;/code&gt;，變數在編譯後並不會出現在最後輸出的 CSS 檔案中。&lt;/p&gt;
&lt;p&gt;此外，變數也可以指定給其他變數使用，變數的值也可以是一個字串值，不過解譯時有特別的語法。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//scss&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$color-white&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$color-pink&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ee11ab&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$title-font&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; normal 24px/1.5 &lt;span class=&quot;token string&quot;&gt;&apos;Open Sans&apos;&lt;/span&gt;, sans-serif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$primary-color&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$color-pink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$color-white&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$color-pink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;撰寫時的建議: 對於會套用到整個網站的每個顏色、字體建議都先定義成變數。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;撰寫時的建議: 不要使用像&lt;code class=&quot;language-text&quot;&gt;red&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;blue&lt;/code&gt;的英文字詞來指定顏色，而是要用 16 進位碼來定義，例如&lt;code class=&quot;language-text&quot;&gt;red&lt;/code&gt;應該寫成&lt;code class=&quot;language-text&quot;&gt;#ff0000&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;撰寫時的建議: 在 CSS 類別中定義時，按照英文字元 A-Za-z 來排列其中的 CSS 樣式定義。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;變數可以再進行作加減乘除餘(&lt;code class=&quot;language-text&quot;&gt;+-*/%&lt;/code&gt;)運算，最特別的是字串與顏色色碼也可以進行運算。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//scss&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$_num&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.container &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$color-pink&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; 2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_num&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 2 &lt;span class=&quot;token variable&quot;&gt;$_num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;撰寫時的建議: 進行運算的運算符號前後要加上空格，不要黏在一團。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;巢狀(Nesting)&lt;/h3&gt;
&lt;p&gt;巢狀語法可以使用明確的階層定義，這種結構在 CSS 中很常見，例如像下面的選單或清單項目的風格定義:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// scss&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;ul &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token selector&quot;&gt;li &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token selector&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #444&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 16px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;上面的內容會編譯為下面的 CSS 內容:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;
      &lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* css */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;ul li&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;ul li a&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #444&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 16px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;因為 CSS 中的巢狀結構會有兩種情況，一種是指包含在某個 DOM 元素之內的，例如上面範例的&lt;code class=&quot;language-text&quot;&gt;ul li a&lt;/code&gt;。而另一種則是指同個 DOM 元素的但不同類別，例如&lt;code class=&quot;language-text&quot;&gt;ul.mylist&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;a:hover&lt;/code&gt;(偽類)。有空格就代表是第一種巢狀的結構，也就是上面的原本的巢狀定義方式。&lt;/p&gt;
&lt;p&gt;第二種巢狀結構是沒有空格，接著在一起的 CSS 定義，這時在巢狀結構語法裡，就需要加入與符號(&amp;#x26;)來定義，代表是黏在一起中間沒有空格的，例如以下的範例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// scss&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.parent &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:hover &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;.other-class &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;上面的內容會編譯為下面的 CSS 內容:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;
      &lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* CSS */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.parent:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.parent.other-class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;風格建議: 如果你有像&lt;code class=&quot;language-text&quot;&gt;h1.title&lt;/code&gt;或&lt;code class=&quot;language-text&quot;&gt;li.mylist&lt;/code&gt;之類的 CSS 宣告，不論裡面的樣式有多簡單，都應該在 SCSS 檔案中都要列成巢狀結構。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;匯入(Import)&lt;/h3&gt;
&lt;p&gt;匯入其他的 SCSS 檔案，最後編譯時會一併包含進來編譯。要被匯入的通常檔案名稱前會加下底線(_)作區分，這樣編譯工具在編譯時會略過這些檔案，而只會去編譯那些沒下底線(_)的檔案，例如&lt;code class=&quot;language-text&quot;&gt;_reset.scss&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如&lt;code class=&quot;language-text&quot;&gt;base.scss&lt;/code&gt;中要匯入&lt;code class=&quot;language-text&quot;&gt;_reset.scss&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;base.scss&lt;/code&gt;的檔案內容會如下，要注意的是只需要寫&lt;code class=&quot;language-text&quot;&gt;@import &amp;#39;reset&amp;#39;&lt;/code&gt;，不用加副檔名或下底線(_)，編譯程式會自動尋找對應的檔案:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;reset&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;body &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #efefef&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100% Helvetica, sans-serif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;註: CSS 中也有&lt;code class=&quot;language-text&quot;&gt;@import&lt;/code&gt;的定義，也可以加入其他的 CSS 檔案，語法有點小差異，詳見&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/@import&quot;&gt;MDN 這裡&lt;/a&gt;的說明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;混合(Mixin)&lt;/h3&gt;
&lt;p&gt;混合(Mixin)有點像是個函式或是一群值的組合，也可以輸入一個值然後套用這個值的整串結果，經常用於需要相符不同瀏覽器品牌的 CSS3 宣告上，來解決供應商前綴字的問題，例如以下的範例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;-webkit-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;-moz-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;-ms-border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.box &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;10px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;要記住的是&lt;code class=&quot;language-text&quot;&gt;@minix&lt;/code&gt;標記需要對應到&lt;code class=&quot;language-text&quot;&gt;@include&lt;/code&gt;標記，上面的&lt;code class=&quot;language-text&quot;&gt;@include border-radius(10px)&lt;/code&gt;可以像變數一樣，加在 scss 檔案中的任一個定義中。&lt;/p&gt;
&lt;p&gt;這個&lt;code class=&quot;language-text&quot;&gt;mixin&lt;/code&gt;中的定義傳入值，是可以加上預設值的，例如以下的範例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$text&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Code&apos;&lt;/span&gt;, &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$background&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$yellow&lt;/span&gt;, &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;black, 0.5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:before &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.6rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;混合(Mixin)經常被使用，在大部份時候如果你需要整個群組或整個類別的 CSS 套用，主要都是使用它，因為 CSS3 很多新的定義都會有供應商前綴字的問題，網路上也有很多現成的混合庫可以使用，例如以下三種常見的函式庫，但這裡面也不只有混合(Mixin)而已，還有很多其他的內容，直接使用可以節省時間，三種基本上都使用&lt;a href=&quot;https://rubygems.org/&quot;&gt;gem&lt;/a&gt;來安裝:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bourbon: &lt;a href=&quot;bourbon.io&quot;&gt;bourbon.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Compass: &lt;a href=&quot;compass-style.org&quot;&gt;compass-style.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Susy: &lt;a href=&quot;susy.oddbird.net&quot;&gt;susy.oddbird.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;擴充/繼承(Extend)&lt;/h3&gt;
&lt;p&gt;擴充(Extend)是可以擴充原有的 CSS 類別定義，你可以再加上不同的定義或覆蓋原有的定義，例如下面的範例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.message &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #ccc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #333&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.success &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@extend&lt;/span&gt; .message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.error &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@extend&lt;/span&gt; .message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;轉成 CSS 會像下面這樣，你可能會注意到&lt;code class=&quot;language-text&quot;&gt;.message&lt;/code&gt;仍然被保留著:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;
      &lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.message,
.success,
.error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #ccc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #333&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.success&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;當不需要那個只被用來的繼承的那個 CSS 類別時，可以使用佔位符(%)來定義這個只被繼承之用的 CSS 類別，像&lt;code class=&quot;language-text&quot;&gt;%message&lt;/code&gt;這樣使用就行了:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token placeholder&quot;&gt;%message&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #ccc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #333&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.success &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;token placeholder selector&quot;&gt;%message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.error &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;token placeholder selector&quot;&gt;%message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;擴充(Extend)的用法相當簡單，相較於混合(Mixin)它不能傳入值，而且會合併相同的定義在同一個類別之中。&lt;/p&gt;
&lt;h3&gt;函式(Functions)&lt;/h3&gt;
&lt;p&gt;SCSS 中也有&lt;code class=&quot;language-text&quot;&gt;@function&lt;/code&gt;可以定義&lt;a href=&quot;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#function_directives&quot;&gt;自訂的函式&lt;/a&gt;，也有一些簡單的程式語法，例如&lt;code class=&quot;language-text&quot;&gt;@return&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;@if&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;@for&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;@each&lt;/code&gt;等流程控制的特性，以及簡單的運算能力。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculate-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$col-span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; 100% &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$col-span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.span-two &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculate-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// spans 2 columns, width = 50%&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.span-three &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculate-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// spans 3 columns, width = 33.3%&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;SCSS 中也內建了許多工具函式，詳見&lt;a href=&quot;http://sass-lang.com/documentation/Sass/Script/Functions.html&quot;&gt;內建函式的清單&lt;/a&gt;，常用的例如按比例加亮顏色的&lt;code class=&quot;language-text&quot;&gt;lighten&lt;/code&gt;與按比例加深顏色的&lt;code class=&quot;language-text&quot;&gt;darken&lt;/code&gt;，裡面有關於顏色、透明度、字串、數字的函式很多。以下為範例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;
      &lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$awesome-blue&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #2196f3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$awesome-blue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;a:hover &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;darken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$awesome-blue&lt;/span&gt;, 10%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;註解(Comment)&lt;/h3&gt;
&lt;p&gt;用類似程式碼寫法的兩條斜線(//)就可以加入註解。CSS 的話是規定要用&lt;code class=&quot;language-text&quot;&gt;/*...*/&lt;/code&gt;的註解記號，相較之下會簡單些。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;15 分鐘分隔線~以下的內容將超過 15 分鐘。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;安裝&lt;/h2&gt;
&lt;p&gt;由於大部份的基礎工具一開始都是使用 Ruby 語言開發，所以相關的編譯工具或檢查工具，或是幾套知名的圖形化介面的應用程式，都是要先在電腦上安裝 RubyGem 才能安裝， Ruby 1.9 版本後都有附 RubyGem。(安裝方式: Windows 裝&lt;a href=&quot;http://rubyinstaller.org/downloads&quot;&gt;RubyInstaller&lt;/a&gt;，Mac OS X 用 homebrew 裝 ruby)。不過這幾套知名的圖形化介面應用程式都只有支援 Mac OS X。&lt;/p&gt;
&lt;p&gt;另一種新的選擇則是使用 node 平台的 npm 套件管理程式來安裝所需的工具，這些工具已經很完整的移植到 node 平台上，雖然還不是 100%的與原來的工具相容，但可用程度也很高了。現在很多編輯程式也支援這些 node 上面的工具程式。node 平台(npm)的方式也是支援各種作業系統的，安裝 node.js 就附有 npm 套件管理程式。&lt;/p&gt;
&lt;h3&gt;編譯器 &amp;#x26; 檢查工具&lt;/h3&gt;
&lt;p&gt;原始的 Sass 編譯工具是使用 Ruby 語言寫的，後來的則有新的 LibSass 專案則是以 C/C++寫的函式庫，可以很方便地移植到不同的程式語言平台中。&lt;/p&gt;
&lt;p&gt;你可以先安裝 Ruby 後用 gem 指令安裝&lt;code class=&quot;language-text&quot;&gt;gem install sass&lt;/code&gt;，而另一個&lt;a href=&quot;https://github.com/brigade/scss-lint&quot;&gt;scss-lint&lt;/a&gt;工具則是另一個用 Ruby 寫的檢查工具，安裝方式類似。&lt;/p&gt;
&lt;p&gt;另一個選擇是當如果你有使用 node 進行開發的話，可以用 npm 來安裝&lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;node-sass&lt;/a&gt;編譯工具套件，再搭配&lt;a href=&quot;https://github.com/sasstools/sass-lint&quot;&gt;sass-lint&lt;/a&gt;的檢查套件。這兩個工具與上面的那種功能是相同的，視需求選擇其中一種即可，像我個人平常是有在開發 JavaScript 應用程式，所以是直接選擇用 node-sass 與 sass-lint 工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;註: scss-lint 與 sass-lint 這兩個套件沒事名字實在取得太像，很容易搞混。前面是 RubyGem 的套件，後面是 npm 的套件，看你要用那種平台，不要裝錯了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;檢查工具的規則&lt;/h3&gt;
&lt;p&gt;配合檢查工具所使用的檢查規則是在專案裡使用一個名稱為&lt;code class=&quot;language-text&quot;&gt;.scss-lint.yml&lt;/code&gt;(RubyGem 套件)或&lt;code class=&quot;language-text&quot;&gt;.sass-lint.yml&lt;/code&gt;(npm 套件)的檔案來設定，通常要有這個檔案在專案中，才會開始進行檢查。&lt;/p&gt;
&lt;p&gt;基本的規則可以到&lt;a href=&quot;https://github.com/brigade/scss-lint#configuration&quot;&gt;scss-lint&lt;/a&gt;專案或&lt;a href=&quot;https://github.com/sasstools/sass-lint/blob/master/lib/config/sass-lint.yml&quot;&gt;sass-lint&lt;/a&gt;專案複製。&lt;/p&gt;
&lt;p&gt;不過&lt;code class=&quot;language-text&quot;&gt;.scss-lint.yml&lt;/code&gt;與&lt;code class=&quot;language-text&quot;&gt;sass-lint.yml&lt;/code&gt;格式有點差異，如果需要轉換可以使用&lt;a href=&quot;https://github.com/sasstools/make-sass-lint-config&quot;&gt;make-sass-lint-config&lt;/a&gt;工具轉換。&lt;/p&gt;
&lt;p&gt;所謂的檢查並不光只是對語法錯誤的即時檢查，比較多的情況都是一些撰寫風格上的建議與提醒訊息。檢查工具的部份我會建議你使用與程式碼編輯工具搭配的套件，會比較容易使用，用命令列指引來檢查實在滿麻煩的。&lt;/p&gt;
&lt;h2&gt;命令列編譯工具的使用&lt;/h2&gt;
&lt;p&gt;與所有的命令列工具一樣，提供很多的參數可以在編譯時選擇使用，一般常用的編譯指令有下面幾個，因為原本的 sass 工具與 node-sass 有一些不同，所以分別列出來。實務上會直接用到指令的情況不多，也同樣會使用程式碼編輯程式中的外掛輔助功能，這裡只是提供一些簡單的參考。&lt;/p&gt;
&lt;h3&gt;單個檔案編譯&lt;/h3&gt;
&lt;p&gt;以 sass 為例，語法參數參考在&lt;a href=&quot;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#syntax&quot;&gt;這裡&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sass input.scss output.css&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;以 node-sass 為例，語法參數參考在&lt;a href=&quot;https://github.com/sass/node-sass#command-line-interface&quot;&gt;這裡&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node-sass src/style.scss dest/style.css&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;對目錄中所有檔案編譯&lt;/h3&gt;
&lt;p&gt;如果要編譯整個目錄中的 scss 檔案到另一個目錄中時:&lt;/p&gt;
&lt;p&gt;以 sass 為例，要使用&lt;code class=&quot;language-text&quot;&gt;--update&lt;/code&gt;參數&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sass --update scss:css&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;以 node-sass 為例，需要加上&lt;code class=&quot;language-text&quot;&gt;--output&lt;/code&gt;指定輸出目錄:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node-sass scss/ --output css/&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;監控目錄中有修改的檔案進行編譯&lt;/h3&gt;
&lt;p&gt;這兩種工具都提供監控(—watch)的參數，意思是當檔案(.scss)有更動時，自動編譯有更動的檔案。監控不僅可以用在單一檔案上，也可以針對目錄中的所有檔案。不過這個指令一輸入就要一直開著命令列視窗才有效。&lt;/p&gt;
&lt;p&gt;以 sass 為例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sass --watch scss:css&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;以 node-sass 為例:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node-sass --watch scss/ -o css/&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;其他的參數&lt;/h3&gt;
&lt;p&gt;有兩種選項可以在編譯時提供更多的彈性，一種是輸出的風格。sass 工具使用的是&lt;code class=&quot;language-text&quot;&gt;--style&lt;/code&gt;參數，而 node-sass 使用的是&lt;code class=&quot;language-text&quot;&gt;--output-style&lt;/code&gt;參數。風格都有以下四種:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nested: 一般的 CSS 樣式，帶有以空白隔出的巢狀結構。&lt;/li&gt;
&lt;li&gt;expanded: 一般的 CSS 樣式。&lt;/li&gt;
&lt;li&gt;compact: 一般的 CSS 樣式，緊湊的排列，會把每個類別中的所有定義寫在同一行中。&lt;/li&gt;
&lt;li&gt;compressed: 經過壓縮的 CSS 樣式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一個選項是輸出原始碼地圖(sourcemap)檔案或內容的選項，原始碼地圖(sourcemap)是用來進行除錯使用的。sass 工具使用的是&lt;code class=&quot;language-text&quot;&gt;--sourcemap&lt;/code&gt;，而 node-sass 除了&lt;code class=&quot;language-text&quot;&gt;--source-map&lt;/code&gt;參數還有其他的幾種選項。&lt;/p&gt;
&lt;h2&gt;常見編輯程式的外掛&lt;/h2&gt;
&lt;h3&gt;Atom 相關外掛&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sass-autocompile: 存檔時自動或是用快捷鍵編譯，支援.scss 或.sass 副檔名的檔案。(需額外安裝 npm 套件 node-sass 在全域中)&lt;/li&gt;
&lt;li&gt;css-snippets: CSS, SCSS, Sass, Less 程式碼片段或函式快速輸入。&lt;a href=&quot;https://github.com/dsandstrom/atom-css-snippets/blob/master/snippets/css-snippets.cson&quot;&gt;表列&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;atom-beautify: 漂亮格式化工具。&lt;/li&gt;
&lt;li&gt;autocomplete-sass: 給 SASS 用的 CSS 屬性名稱與數值自動完成(提示建議)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;檢查工具(擇一):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linter-sass-lint: 檢查工具外掛，搭配 node sass-lint(npm 套件)&lt;/li&gt;
&lt;li&gt;linter-scss-lint: 檢查工具外掛，搭配 scss-lint(RubyGem 套件)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sublime Text 3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/packages/Sass&quot;&gt;Sass&lt;/a&gt;: 高亮度顯示與語法自動完成(提示建議)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/packages/SassBuilder&quot;&gt;Sass​Builder&lt;/a&gt;: 編譯輔助工具。需要先安裝 sass 編譯工具，而且需要有設定檔，參考說明文件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/packages/SassBeautify&quot;&gt;Sass​Beautify&lt;/a&gt;: 漂亮格式化工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/packages/SASS%20Snippets&quot;&gt;SASS Snippets&lt;/a&gt;: 程式碼片段或函式快速輸入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Webstorm&lt;/h3&gt;
&lt;p&gt;內建基本的編輯高亮度顯示支援，可搭配外部的編譯工具進行編譯，請見這篇官網的&lt;a href=&quot;https://www.jetbrains.com/help/webstorm/2016.2/transpiling-sass-less-and-scss-to-css.html&quot;&gt;說明文件&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Visual Studio Code(VSC)&lt;/h3&gt;
&lt;p&gt;內建基本的編輯高亮度顯示支援，可搭配外部的編譯工具進行編譯，請見這篇官網的&lt;a href=&quot;https://code.visualstudio.com/Docs/languages/css&quot;&gt;說明文件&lt;/a&gt;。其他的套件例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=robinbentley.sass-indented&quot;&gt;Sass&lt;/a&gt;: 高亮度顯示與語法自動完成(提示建議)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=glen-84.sass-lint&quot;&gt;Sass Lint&lt;/a&gt;: 搭配 sass-lint(npm 套件)的檢查工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbalage.vscode-stylesheet-formatter&quot;&gt;Stylesheet Formatter&lt;/a&gt;: 漂亮格式化工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Visual Studio 2015&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://visualstudiogallery.msdn.microsoft.com/3b329021-cd7a-4a01-86fc-714c2d05bb6c&quot;&gt;Web Compiler&lt;/a&gt;: 用於編譯 SASS 檔案的擴充。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dreamweaver&lt;/h3&gt;
&lt;p&gt;Dreamweaver 2015/CC 不支援，要使用另外的工具搭配。不過正在測試中的新版本已有加入支援，請見&lt;a href=&quot;https://blogs.adobe.com/creativestation/web-dreamweaver-sass-compile-and-options&quot;&gt;這篇 2016.8 日文的新版本特性說明&lt;/a&gt;，內容中可以下載測試版本。&lt;/p&gt;
&lt;h3&gt;Brackets&lt;/h3&gt;
&lt;p&gt;內建基本的編輯高亮度顯示支援，也有套件可以配合檢查工具。&lt;/p&gt;
&lt;h2&gt;結語&lt;/h2&gt;
&lt;p&gt;看到這裡記得開始安裝與使用吧，坐而言不如起而行。&lt;/p&gt;</content:encoded></item></channel></rss>